{"version":3,"file":"AzureFunctionsDetector.js","sourceRoot":"","sources":["../../../src/detectors/AzureFunctionsDetector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,wDAA6E;AAE7E,8EAU6C;AAC7C,oCAMkB;AAElB,MAAM,kCAAkC,GAAG;IACzC,CAAC,4CAAqB,CAAC,EAAE,yBAAiB;IAC1C,CAAC,+CAAwB,CAAC,EAAE,yBAAiB;IAC7C,CAAC,gDAAyB,CAAC,EAAE,2BAAmB;IAChD,CAAC,kDAA2B,CAAC,EAAE,2BAAmB;CACnD,CAAC;AAEF;;;GAGG;AACH,MAAM,sBAAsB;IAC1B,MAAM;QACJ,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAiB,CAAC,CAAC;QACpD,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAiB,CAAC,CAAC;QACvD,IAAI,YAAY,IAAI,eAAe,EAAE;YACnC,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,2BAAmB,CAAC,CAAC;YAC1D,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,2BAAmB,CAAC,CAAC;YAE1D,UAAU,GAAG;gBACX,CAAC,iDAA0B,CAAC,EAAE,gDAAyB;gBACvD,CAAC,iDAA0B,CAAC,EAAE,0DAAmC;gBACjE,CAAC,+CAAwB,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAW,CAAC;aACrD,CAAC;YAEF,IAAI,YAAY,EAAE;gBAChB,UAAU,mCACL,UAAU,KACb,CAAC,4CAAqB,CAAC,EAAE,YAAY,GACtC,CAAC;aACH;YACD,IAAI,eAAe,EAAE;gBACnB,UAAU,mCACL,UAAU,KACb,CAAC,+CAAwB,CAAC,EAAE,eAAe,GAC5C,CAAC;aACH;YACD,IAAI,gBAAgB,EAAE;gBACpB,UAAU,mCACL,UAAU,KACb,CAAC,gDAAyB,CAAC,EAAE,gBAAgB,GAC9C,CAAC;aACH;YACD,IAAI,gBAAgB,EAAE;gBACpB,UAAU,mCACL,UAAU,KACb,CAAC,kDAA2B,CAAC,EAAE,gBAAgB,GAChD,CAAC;aACH;YAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CACvC,kCAAkC,CACnC,EAAE;gBACD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,MAAM,EAAE;oBACV,UAAU,mCAAQ,UAAU,GAAK,EAAE,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAE,CAAC;iBACtD;aACF;SACF;QACD,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;CACF;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DetectorSync, IResource, Resource } from '@opentelemetry/resources';\n\nimport {\n  SEMRESATTRS_FAAS_NAME,\n  SEMRESATTRS_FAAS_VERSION,\n  SEMRESATTRS_FAAS_MAX_MEMORY,\n  SEMRESATTRS_FAAS_INSTANCE,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_CLOUD_REGION,\n  CLOUDPROVIDERVALUES_AZURE,\n  CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  WEBSITE_SITE_NAME,\n  FUNCTIONS_VERSION,\n  WEBSITE_INSTANCE_ID,\n  FUNCTIONS_MEM_LIMIT,\n  REGION_NAME,\n} from '../types';\n\nconst AZURE_FUNCTIONS_ATTRIBUTE_ENV_VARS = {\n  [SEMRESATTRS_FAAS_NAME]: WEBSITE_SITE_NAME,\n  [SEMRESATTRS_FAAS_VERSION]: FUNCTIONS_VERSION,\n  [SEMRESATTRS_FAAS_INSTANCE]: WEBSITE_INSTANCE_ID,\n  [SEMRESATTRS_FAAS_MAX_MEMORY]: FUNCTIONS_MEM_LIMIT,\n};\n\n/**\n * The AzureFunctionsDetector can be used to detect if a process is running in Azure Functions\n * @returns a {@link Resource} populated with data about the environment or an empty Resource if detection fails.\n */\nclass AzureFunctionsDetector implements DetectorSync {\n  detect(): IResource {\n    let attributes = {};\n    const functionName = process.env[WEBSITE_SITE_NAME];\n    const functionVersion = process.env[FUNCTIONS_VERSION];\n    if (functionName && functionVersion) {\n      const functionInstance = process.env[WEBSITE_INSTANCE_ID];\n      const functionMemLimit = process.env[FUNCTIONS_MEM_LIMIT];\n\n      attributes = {\n        [SEMRESATTRS_CLOUD_PROVIDER]: CLOUDPROVIDERVALUES_AZURE,\n        [SEMRESATTRS_CLOUD_PLATFORM]: CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n        [SEMRESATTRS_CLOUD_REGION]: process.env[REGION_NAME],\n      };\n\n      if (functionName) {\n        attributes = {\n          ...attributes,\n          [SEMRESATTRS_FAAS_NAME]: functionName,\n        };\n      }\n      if (functionVersion) {\n        attributes = {\n          ...attributes,\n          [SEMRESATTRS_FAAS_VERSION]: functionVersion,\n        };\n      }\n      if (functionInstance) {\n        attributes = {\n          ...attributes,\n          [SEMRESATTRS_FAAS_INSTANCE]: functionInstance,\n        };\n      }\n      if (functionMemLimit) {\n        attributes = {\n          ...attributes,\n          [SEMRESATTRS_FAAS_MAX_MEMORY]: functionMemLimit,\n        };\n      }\n\n      for (const [key, value] of Object.entries(\n        AZURE_FUNCTIONS_ATTRIBUTE_ENV_VARS\n      )) {\n        const envVar = process.env[value];\n        if (envVar) {\n          attributes = { ...attributes, ...{ [key]: envVar } };\n        }\n      }\n    }\n    return new Resource(attributes);\n  }\n}\n\nexport const azureFunctionsDetector = new AzureFunctionsDetector();\n"]}