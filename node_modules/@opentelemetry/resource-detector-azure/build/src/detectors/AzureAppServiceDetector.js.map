{"version":3,"file":"AzureAppServiceDetector.js","sourceRoot":"","sources":["../../../src/detectors/AzureAppServiceDetector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,wDAA6E;AAC7E,oCAYkB;AAClB,8EAU6C;AAE7C,MAAM,8BAA8B,GAAG;IACrC,CAAC,+CAAwB,CAAC,EAAE,mBAAW;IACvC,CAAC,yDAAkC,CAAC,EAAE,yBAAiB;IACvD,CAAC,0CAAmB,CAAC,EAAE,wBAAgB;IACvC,CAAC,sDAA+B,CAAC,EAAE,2BAAmB;IACtD,CAAC,kDAA0C,CAAC,EAAE,8BAAsB;CACrE,CAAC;AAEF;;;GAGG;AACH,MAAM,uBAAuB;IAC3B,MAAM;QACJ,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAiB,CAAC,CAAC;QACvD,MAAM,eAAe,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAiB,CAAC,CAAC;QACzD,IAAI,eAAe,IAAI,CAAC,eAAe,EAAE;YACvC,UAAU,mCACL,UAAU,KACb,CAAC,+CAAwB,CAAC,EAAE,eAAe,GAC5C,CAAC;YACF,UAAU,mCACL,UAAU,KACb,CAAC,iDAA0B,CAAC,EAAE,gDAAyB,GACxD,CAAC;YACF,UAAU,mCACL,UAAU,KACb,CAAC,iDAA0B,CAAC,EAAE,4DAAqC,GACpE,CAAC;YAEF,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;YACnE,IAAI,gBAAgB,EAAE;gBACpB,UAAU,mCACL,UAAU,GACV,EAAE,CAAC,4CAAoC,CAAC,EAAE,gBAAgB,EAAE,CAChE,CAAC;aACH;YAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CACvC,8BAA8B,CAC/B,EAAE;gBACD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,MAAM,EAAE;oBACV,UAAU,mCAAQ,UAAU,GAAK,EAAE,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAE,CAAC;iBACtD;aACF;SACF;QACD,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAEO,mBAAmB,CAAC,eAAuB;QACjD,MAAM,oBAAoB,GAAG,OAAO,CAAC,GAAG,CAAC,8BAAsB,CAAC,CAAC;QACjE,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,0BAAkB,CAAC,CAAC;QAEzD,IAAI,cAAc,GAAG,gBAAgB,CAAC;QACtC,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC5D,cAAc,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,cAAc,IAAI,CAAC,gBAAgB,EAAE;YACxC,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,kBAAkB,cAAc,mBAAmB,oBAAoB,kCAAkC,eAAe,EAAE,CAAC;IACpI,CAAC;CACF;AAEY,QAAA,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DetectorSync, IResource, Resource } from '@opentelemetry/resources';\nimport {\n  AZURE_APP_SERVICE_STAMP_RESOURCE_ATTRIBUTE,\n  REGION_NAME,\n  WEBSITE_HOME_STAMPNAME,\n  WEBSITE_HOSTNAME,\n  WEBSITE_INSTANCE_ID,\n  WEBSITE_OWNER_NAME,\n  WEBSITE_RESOURCE_GROUP,\n  WEBSITE_SITE_NAME,\n  WEBSITE_SLOT_NAME,\n  CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE,\n  FUNCTIONS_VERSION,\n} from '../types';\nimport {\n  SEMRESATTRS_CLOUD_REGION,\n  SEMRESATTRS_DEPLOYMENT_ENVIRONMENT,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_SERVICE_INSTANCE_ID,\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  CLOUDPROVIDERVALUES_AZURE,\n  CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n} from '@opentelemetry/semantic-conventions';\n\nconst APP_SERVICE_ATTRIBUTE_ENV_VARS = {\n  [SEMRESATTRS_CLOUD_REGION]: REGION_NAME,\n  [SEMRESATTRS_DEPLOYMENT_ENVIRONMENT]: WEBSITE_SLOT_NAME,\n  [SEMRESATTRS_HOST_ID]: WEBSITE_HOSTNAME,\n  [SEMRESATTRS_SERVICE_INSTANCE_ID]: WEBSITE_INSTANCE_ID,\n  [AZURE_APP_SERVICE_STAMP_RESOURCE_ATTRIBUTE]: WEBSITE_HOME_STAMPNAME,\n};\n\n/**\n * The AzureAppServiceDetector can be used to detect if a process is running in an Azure App Service\n * @returns a {@link Resource} populated with data about the environment or an empty Resource if detection fails.\n */\nclass AzureAppServiceDetector implements DetectorSync {\n  detect(): IResource {\n    let attributes = {};\n    const websiteSiteName = process.env[WEBSITE_SITE_NAME];\n    const isAzureFunction = !!process.env[FUNCTIONS_VERSION];\n    if (websiteSiteName && !isAzureFunction) {\n      attributes = {\n        ...attributes,\n        [SEMRESATTRS_SERVICE_NAME]: websiteSiteName,\n      };\n      attributes = {\n        ...attributes,\n        [SEMRESATTRS_CLOUD_PROVIDER]: CLOUDPROVIDERVALUES_AZURE,\n      };\n      attributes = {\n        ...attributes,\n        [SEMRESATTRS_CLOUD_PLATFORM]: CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n      };\n\n      const azureResourceUri = this.getAzureResourceUri(websiteSiteName);\n      if (azureResourceUri) {\n        attributes = {\n          ...attributes,\n          ...{ [CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE]: azureResourceUri },\n        };\n      }\n\n      for (const [key, value] of Object.entries(\n        APP_SERVICE_ATTRIBUTE_ENV_VARS\n      )) {\n        const envVar = process.env[value];\n        if (envVar) {\n          attributes = { ...attributes, ...{ [key]: envVar } };\n        }\n      }\n    }\n    return new Resource(attributes);\n  }\n\n  private getAzureResourceUri(websiteSiteName: string): string | undefined {\n    const websiteResourceGroup = process.env[WEBSITE_RESOURCE_GROUP];\n    const websiteOwnerName = process.env[WEBSITE_OWNER_NAME];\n\n    let subscriptionId = websiteOwnerName;\n    if (websiteOwnerName && websiteOwnerName.indexOf('+') !== -1) {\n      subscriptionId = websiteOwnerName.split('+')[0];\n    }\n\n    if (!subscriptionId && !websiteOwnerName) {\n      return undefined;\n    }\n\n    return `/subscriptions/${subscriptionId}/resourceGroups/${websiteResourceGroup}/providers/Microsoft.Web/sites/${websiteSiteName}`;\n  }\n}\n\nexport const azureAppServiceDetector = new AzureAppServiceDetector();\n"]}